# Sandeep Venkataram
# Petrov Lab | Stanford University
# March 28th, 2016
# This code is used to condense the barcode counts file generated by processUniquesFileToBarcodeCounts.pl
# the condensation 1) removes all barcodes from the file with too few reads (likely sequencing / mapping errors)
# and 2) merges lines into distinct barcode groups such that every barcode ID is only found once in the file at most


#!/usr/bin/perl
use strict;
use warnings;

my $infile = shift; #the input file from processUniquesFileToBarcodeCounts.pl

#read in the file
open(FILE, $infile);
my $header = <FILE>;
my @lines = <FILE>;
close(FILE);
my $minReadCutoff = 5;

my %linesTrimmed = (); # indexed by the barcode generated for the line in processUniquesFileToBarcodeCounts.pl
my %uniqueBarcodesToKeys = (); #indexed by single barcodes, never a group


# for each line in the file, remove those that have too few reads and index the lines into hash tables by both single barcodes and barcode groups
foreach my $line(@lines){
	my @split = split("\t",trim($line));
	my $barcode = shift @split;
	my $foundHigher = 0;
	foreach my $numReads (@split){
		if($numReads > $minReadCutoff){
			$foundHigher = 1;
			last;
		}
	}
	if($foundHigher){ #if the line has enough reads
		$linesTrimmed{$barcode} = join("\t",@split);
		my @bcSplit = split("/",$barcode);
		foreach my $bc(@bcSplit){ #for each individual barcode tagged for the line
			#add the file line barcode to the list for the individual barcode
			if (! defined $uniqueBarcodesToKeys{$bc}){ 
				$uniqueBarcodesToKeys{$bc} = "$barcode";
			}else{
				$uniqueBarcodesToKeys{$bc}.="\t".$barcode;
			}
		}
	}
}


my %usedBarcodes = (); #barcodes already used that we don't have to deal with any more
print $header;
foreach my $key(keys %uniqueBarcodesToKeys){ #for every individual bc in the table
	next if defined $usedBarcodes{$key};
	
	#initialize variables
	my @barcodeKeysToUse = ($key);
	$usedBarcodes{$key} = 1;
	my @barcodesInGroup = ($key);
	my @barcodeGroupCounts = ();
	
	while(scalar(@barcodeKeysToUse)>0){ #as long as there are more associated bcs to be added to this group
		my $currentBC = shift @barcodeKeysToUse; #the "key" individual bc we are looking at
		my @groupedBarcodes = split("\t",trim($uniqueBarcodesToKeys{$currentBC})); #the set of file bcs associated with this individual bc
		foreach my $origBC(@groupedBarcodes){ #for every file bc
			my @bcsp = split("/",$origBC); #figure out all individual bcs associated with the key bc
			foreach my $bc2(@bcsp){ #for each individual associated bc, add to the group if it has not already been processed
				next if defined $usedBarcodes{$bc2};
				push @barcodeKeysToUse, $bc2;
				push @barcodesInGroup, $bc2;
				$usedBarcodes{$bc2} = 1;
			}
			
			#add file line to the group count
			if(scalar(@barcodeGroupCounts) ==0){
				@barcodeGroupCounts = split("\t",$linesTrimmed{$origBC});
			}else{
				my @barcodeGroupCounts2 = split("\t",$linesTrimmed{$origBC});
				foreach my $i(0..scalar(@barcodeGroupCounts)-1){
					$barcodeGroupCounts[$i]+=$barcodeGroupCounts2[$i];
				}
			}
		}
	}
	print join("/",sort {$a<=>$b} @barcodesInGroup)."\t".join("\t",@barcodeGroupCounts)."\n"; #print it out!
}


sub trim
{
	my $string = shift;
	$string =~ s/^\s+//;
	$string =~ s/\s+$//;
	return $string;
}